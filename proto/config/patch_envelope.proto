// Copyright(c) 2023 Zededa, Inc.
// All rights reserved

syntax = "proto3";

package org.lfedge.eve.config;
option go_package = "github.com/lf-edge/eve-api/go/config";
option java_package = "org.lfedge.eve.config";

import "google/protobuf/timestamp.proto";
import "evecommon/acipherinfo.proto";

enum EVE_OPAQUE_OBJECT_CATEGORY {
    UNKOWN = 0;
    BASE64 = 1;
    BINARYBLOB = 2;
    SECRET = 3;
}

message InlineOpaqueBase64Data {
    // base64 encoded data
    string base64Data = 1;

    // file name to be used for storing this data
    // same file name shall be advertised to application agent
    string fileNameToUse = 2;

    // any arbitraty metadata encoded to base64 string
    optional string base64MetaData = 3;
}

message EncryptedInlineOpaqueBase64Data {
    // Encrypted serialized copy of InlineOpaqueBase64Data
    org.lfedge.eve.common.CipherBlock cipher_data = 1;
}

message ExternalOpaqueBinaryBlob {
    // Name of the image uploaded into data store
    string imageName = 1;

    // file name to be used for storing this data in EVE
    // the same file name shall be advertised to application agent
    // if it's empty EVE will use image name
    optional string fileNameToUse = 2;

    // can be image type or size encoded into a single string
    optional string blobMetaData = 3;

    // Target field of Volume set to AppCustom
    // refers to UUID of a volume
    string imageId = 4;
}

message EncryptedExternalOpaqueBinaryBlob {
    // Encrypted serialized copy of ExternalOpaqueBinaryBlob
    org.lfedge.eve.common.CipherBlock cipher_data = 1;
}

message EveBinaryArtifact {
    // base64 or binary blob only - secret type is invalid
    EVE_OPAQUE_OBJECT_CATEGORY format = 1;

    oneof binaryBlob {
        InlineOpaqueBase64Data inline = 2;
        ExternalOpaqueBinaryBlob volumeRef = 3;
        // There is an intended skip in field IDs here
        // to handle the existing artifactMetaData
        // and metadata_cipher_data fields.
        EncryptedInlineOpaqueBase64Data encrypted_inline = 6;
        EncryptedExternalOpaqueBinaryBlob encrypted_volumeref = 7;
    }

    // If metadata_cipher_data is set then artifactMetaData can be ignored
    optional string artifactMetaData = 4;

    // Optional encryption for EveBinaryArtifact.artifactMetaData
    // CipherBlock.cipherData should contain the encrypted serialized
    // copy of an EncryptionBlock structure with
    // EncryptionBlock.user = ENCRYPTION_BLOCK_USER_BINARY_ARTIFACT_METADATA
    // and EncryptionBlock.encrypted_data set to the EveBinaryArtifact.artifactMetaData text.
    optional org.lfedge.eve.common.CipherBlock metadata_cipher_data = 5;

    // Field Ids will need to continue from encrypted_volumeref above due to the
    // unexpected ordering here.
}

enum EVE_PATCH_ENVELOPE_ACTION {
    STORE = 0;
    ACTIVATE = 1;
}

message EvePatchEnvelope {
    // Unique name provided by user
    string displayName = 1;
    // Unique 
    string uuid = 2;
    // arbitrary version from user
    optional string version = 3;
    // way this object should be treated
    EVE_PATCH_ENVELOPE_ACTION action = 4;
    repeated EveBinaryArtifact artifacts = 5;
    
    // List of application instance ids that should
    // be allowed to access this patch envelope
    repeated string appInstIdsAllowed = 6;

    // Time object created in UTC format
    google.protobuf.Timestamp createTime = 7;
}
